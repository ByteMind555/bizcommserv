/*
 * bizcommserv
 * This is an Air New Zealand - Technology Platform eXperience(TPX) offering. The platform exposes REST service for communication, supporting channels like eMail, SMS and Chats(user to user & user to group) in the future.
 *
 * OpenAPI spec version: V1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package generated;

import com.fasterxml.jackson.annotation.JsonProperty;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;

import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

/**
 * The list of to,cc,bcc mail Ids that needs to be added
 */
@ApiModel(description = "The list of to,cc,bcc mail Ids that needs to be added")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2023-12-03T09:16:47.346Z")
public class RecipientDetail {
  @JsonProperty("recipient_to")
  private List<EmailAddress> recipientTo = new ArrayList<EmailAddress>();

  @JsonProperty("recipient_cc")
  private List<EmailAddress> recipientCc = new ArrayList<>();

  @JsonProperty("recipient_bcc")
  private List<EmailAddress> recipientBcc = new ArrayList<>();

  public RecipientDetail recipientTo(List<EmailAddress> recipientTo) {
    this.recipientTo = recipientTo;
    return this;
  }

  public RecipientDetail addRecipientToItem(EmailAddress recipientToItem) {
    this.recipientTo.add(recipientToItem);
    return this;
  }

   /**
   * The &#39;to&#39; list of email Ids to which the email need to be sent.
   * @return recipientTo
  **/
  @ApiModelProperty(required = true, value = "The 'to' list of email Ids to which the email need to be sent.")
  public List<EmailAddress> getRecipientTo() {
    return recipientTo;
  }

  public void setRecipientTo(List<EmailAddress> recipientTo) {
    this.recipientTo = recipientTo;
  }

  public RecipientDetail recipientCc(List<EmailAddress> recipientCc) {
    this.recipientCc = recipientCc;
    return this;
  }

  public RecipientDetail addRecipientCcItem(EmailAddress recipientCcItem) {
    if (this.recipientCc == null) {
      this.recipientCc = new ArrayList<EmailAddress>();
    }
    this.recipientCc.add(recipientCcItem);
    return this;
  }

   /**
   * Get recipientCc
   * @return recipientCc
  **/
  @ApiModelProperty(value = "")
  public List<EmailAddress> getRecipientCc() {
    return recipientCc;
  }

  public void setRecipientCc(List<EmailAddress> recipientCc) {
    this.recipientCc = recipientCc;
  }

  public RecipientDetail recipientBcc(List<EmailAddress> recipientBcc) {
    this.recipientBcc = recipientBcc;
    return this;
  }

  public RecipientDetail addRecipientBccItem(EmailAddress recipientBccItem) {
    if (this.recipientBcc == null) {
      this.recipientBcc = new ArrayList<EmailAddress>();
    }
    this.recipientBcc.add(recipientBccItem);
    return this;
  }

   /**
   * Get recipientBcc
   * @return recipientBcc
  **/
  @ApiModelProperty(value = "")
  public List<EmailAddress> getRecipientBcc() {
    return recipientBcc;
  }

  public void setRecipientBcc(List<EmailAddress> recipientBcc) {
    this.recipientBcc = recipientBcc;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RecipientDetail recipientDetail = (RecipientDetail) o;
    return Objects.equals(this.recipientTo, recipientDetail.recipientTo) &&
        Objects.equals(this.recipientCc, recipientDetail.recipientCc) &&
        Objects.equals(this.recipientBcc, recipientDetail.recipientBcc);
  }

  @Override
  public int hashCode() {
    return Objects.hash(recipientTo, recipientCc, recipientBcc);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RecipientDetail {\n");
    
    sb.append("    recipientTo: ").append(toIndentedString(recipientTo)).append("\n");
    sb.append("    recipientCc: ").append(toIndentedString(recipientCc)).append("\n");
    sb.append("    recipientBcc: ").append(toIndentedString(recipientBcc)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

